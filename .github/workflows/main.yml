name: Add Unassigned Issues to Team_16's Scrum Board

on:
  issues:
    types: [opened, edited, milestoned]
  workflow_dispatch:  # Allow manual trigger

jobs:
  add-to-project:
    runs-on: ubuntu-latest
    steps:
      - name: Check if Issue is Unassigned
        if: github.event.issue.assignees == ''
        run: echo "Issue is unassigned. Proceeding..."

      - name: Get Issue ID
        if: github.event.issue.assignees == '' && github.event.issue.milestone.title == 'First Checkpoint'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          ISSUE_NUMBER="${{ github.event.issue.number }}"
          
          if [ -z "$ISSUE_NUMBER" ]; then
            echo "Error: ISSUE_NUMBER is empty."
            exit 1
          fi

          ISSUE_ID=$(gh api graphql -F number="$ISSUE_NUMBER" -F owner="cmput301-w25" -F repo="project-team_16" -f query='
          query($owner: String!, $repo: String!, $number: Int!) {
            repository(owner: $owner, name: $repo) {
              issue(number: $number) {
                id
              }
            }
          }' --jq '.data.repository.issue.id')

          if [ -z "$ISSUE_ID" ]; then
            echo "Error: ISSUE_ID retrieval failed."
            exit 1
          fi

          echo "Issue ID: $ISSUE_ID"
          echo "ISSUE_ID=$ISSUE_ID" >> $GITHUB_ENV

      - name: Get Project ID (Debugging)
        run: |
          echo "Fetching Project ID..."
          PROJECT_ID=$(gh api graphql -f query='
          query {
            organization(login: "cmput301-w25") {
              projectV2(number: 1) {  # Adjust project number
                id
              }
            }
          }' --jq '.data.organization.projectV2.id')

          echo "Project ID: $PROJECT_ID"
          echo "PROJECT_ID=$PROJECT_ID" >> $GITHUB_ENV

      - name: Add Issue to Project
        if: env.ISSUE_ID != '' && env.PROJECT_ID != ''
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh api graphql -F projectId="$PROJECT_ID" -F contentId="$ISSUE_ID" -f query='
          mutation($projectId: ID!, $contentId: ID!) {
            addProjectV2ItemById(input: {projectId: $projectId, contentId: $contentId}) {
              item {
                id
              }
            }
          }'

      - name: Get Status Field ID
        id: get_status_field
        run: |
          echo "Fetching Status Field ID..."
          STATUS_FIELD_ID=$(gh api graphql -F projectId="$PROJECT_ID" -f query='
          query($projectId: ID!) {
            node(id: $projectId) {
              ... on ProjectV2 {
                field(name: "Status") {
                  ... on ProjectV2Field {
                    id
                  }
                }
              }
            }
          }' --jq '.data.node.field.id')

          echo "STATUS_FIELD_ID=$STATUS_FIELD_ID" >> $GITHUB_ENV

      - name: Update Issue Status
        if: env.ISSUE_ID != '' && env.STATUS_FIELD_ID != ''
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh api graphql -F projectId="$PROJECT_ID" -F itemId="$ISSUE_ID" -F statusFieldId="$STATUS_FIELD_ID" -f query='
          mutation($projectId: ID!, $itemId: ID!, $statusFieldId: ID!) {
            updateProjectV2ItemFieldValue(input: {projectId: $projectId, itemId: $itemId, fieldId: $statusFieldId, value: {text: "Project Part 2"}}) {
              projectV2Item {
                id
              }
            }
          }'
